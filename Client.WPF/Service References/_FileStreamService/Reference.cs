//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.WPF._FileStreamService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="_FileStreamService.IFileStreamService")]
    public interface IFileStreamService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/get_CanRead", ReplyAction="http://tempuri.org/IFileStreamService/get_CanReadResponse")]
        bool get_CanRead();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/get_CanRead", ReplyAction="http://tempuri.org/IFileStreamService/get_CanReadResponse")]
        System.Threading.Tasks.Task<bool> get_CanReadAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/get_CanSeek", ReplyAction="http://tempuri.org/IFileStreamService/get_CanSeekResponse")]
        bool get_CanSeek();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/get_CanSeek", ReplyAction="http://tempuri.org/IFileStreamService/get_CanSeekResponse")]
        System.Threading.Tasks.Task<bool> get_CanSeekAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/get_CanWrite", ReplyAction="http://tempuri.org/IFileStreamService/get_CanWriteResponse")]
        bool get_CanWrite();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/get_CanWrite", ReplyAction="http://tempuri.org/IFileStreamService/get_CanWriteResponse")]
        System.Threading.Tasks.Task<bool> get_CanWriteAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/get_Length", ReplyAction="http://tempuri.org/IFileStreamService/get_LengthResponse")]
        long get_Length();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/get_Length", ReplyAction="http://tempuri.org/IFileStreamService/get_LengthResponse")]
        System.Threading.Tasks.Task<long> get_LengthAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/get_Position", ReplyAction="http://tempuri.org/IFileStreamService/get_PositionResponse")]
        long get_Position();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/get_Position", ReplyAction="http://tempuri.org/IFileStreamService/get_PositionResponse")]
        System.Threading.Tasks.Task<long> get_PositionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/set_Position", ReplyAction="http://tempuri.org/IFileStreamService/set_PositionResponse")]
        void set_Position(long value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/set_Position", ReplyAction="http://tempuri.org/IFileStreamService/set_PositionResponse")]
        System.Threading.Tasks.Task set_PositionAsync(long value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/Initialize", ReplyAction="http://tempuri.org/IFileStreamService/InitializeResponse")]
        void Initialize(string path, System.IO.FileMode mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/Initialize", ReplyAction="http://tempuri.org/IFileStreamService/InitializeResponse")]
        System.Threading.Tasks.Task InitializeAsync(string path, System.IO.FileMode mode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/Flush", ReplyAction="http://tempuri.org/IFileStreamService/FlushResponse")]
        void Flush();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/Flush", ReplyAction="http://tempuri.org/IFileStreamService/FlushResponse")]
        System.Threading.Tasks.Task FlushAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/Read", ReplyAction="http://tempuri.org/IFileStreamService/ReadResponse")]
        byte[] Read(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/Read", ReplyAction="http://tempuri.org/IFileStreamService/ReadResponse")]
        System.Threading.Tasks.Task<byte[]> ReadAsync(int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/Seek", ReplyAction="http://tempuri.org/IFileStreamService/SeekResponse")]
        long Seek(long offset, System.IO.SeekOrigin origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/Seek", ReplyAction="http://tempuri.org/IFileStreamService/SeekResponse")]
        System.Threading.Tasks.Task<long> SeekAsync(long offset, System.IO.SeekOrigin origin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/SetLength", ReplyAction="http://tempuri.org/IFileStreamService/SetLengthResponse")]
        void SetLength(long value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/SetLength", ReplyAction="http://tempuri.org/IFileStreamService/SetLengthResponse")]
        System.Threading.Tasks.Task SetLengthAsync(long value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/Write", ReplyAction="http://tempuri.org/IFileStreamService/WriteResponse")]
        void Write(byte[] buffer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFileStreamService/Write", ReplyAction="http://tempuri.org/IFileStreamService/WriteResponse")]
        System.Threading.Tasks.Task WriteAsync(byte[] buffer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFileStreamServiceChannel : Client.WPF._FileStreamService.IFileStreamService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FileStreamServiceClient : System.ServiceModel.ClientBase<Client.WPF._FileStreamService.IFileStreamService>, Client.WPF._FileStreamService.IFileStreamService {
        
        public FileStreamServiceClient() {
        }
        
        public FileStreamServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FileStreamServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileStreamServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FileStreamServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool get_CanRead() {
            return base.Channel.get_CanRead();
        }
        
        public System.Threading.Tasks.Task<bool> get_CanReadAsync() {
            return base.Channel.get_CanReadAsync();
        }
        
        public bool get_CanSeek() {
            return base.Channel.get_CanSeek();
        }
        
        public System.Threading.Tasks.Task<bool> get_CanSeekAsync() {
            return base.Channel.get_CanSeekAsync();
        }
        
        public bool get_CanWrite() {
            return base.Channel.get_CanWrite();
        }
        
        public System.Threading.Tasks.Task<bool> get_CanWriteAsync() {
            return base.Channel.get_CanWriteAsync();
        }
        
        public long get_Length() {
            return base.Channel.get_Length();
        }
        
        public System.Threading.Tasks.Task<long> get_LengthAsync() {
            return base.Channel.get_LengthAsync();
        }
        
        public long get_Position() {
            return base.Channel.get_Position();
        }
        
        public System.Threading.Tasks.Task<long> get_PositionAsync() {
            return base.Channel.get_PositionAsync();
        }
        
        public void set_Position(long value) {
            base.Channel.set_Position(value);
        }
        
        public System.Threading.Tasks.Task set_PositionAsync(long value) {
            return base.Channel.set_PositionAsync(value);
        }
        
        public void Initialize(string path, System.IO.FileMode mode) {
            base.Channel.Initialize(path, mode);
        }
        
        public System.Threading.Tasks.Task InitializeAsync(string path, System.IO.FileMode mode) {
            return base.Channel.InitializeAsync(path, mode);
        }
        
        public void Flush() {
            base.Channel.Flush();
        }
        
        public System.Threading.Tasks.Task FlushAsync() {
            return base.Channel.FlushAsync();
        }
        
        public byte[] Read(int count) {
            return base.Channel.Read(count);
        }
        
        public System.Threading.Tasks.Task<byte[]> ReadAsync(int count) {
            return base.Channel.ReadAsync(count);
        }
        
        public long Seek(long offset, System.IO.SeekOrigin origin) {
            return base.Channel.Seek(offset, origin);
        }
        
        public System.Threading.Tasks.Task<long> SeekAsync(long offset, System.IO.SeekOrigin origin) {
            return base.Channel.SeekAsync(offset, origin);
        }
        
        public void SetLength(long value) {
            base.Channel.SetLength(value);
        }
        
        public System.Threading.Tasks.Task SetLengthAsync(long value) {
            return base.Channel.SetLengthAsync(value);
        }
        
        public void Write(byte[] buffer) {
            base.Channel.Write(buffer);
        }
        
        public System.Threading.Tasks.Task WriteAsync(byte[] buffer) {
            return base.Channel.WriteAsync(buffer);
        }
    }
}
